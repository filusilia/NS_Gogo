<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<!--suppress MybatisGenerateCustomPluginInspection -->
<generatorConfiguration>
<!--    <properties resource="project.properties"/>-->
    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <property name="javaFileEncoding" value="UTF-8"/>
        <!--配置是否使用通用 Mapper 自带的注释扩展，默认 true-->
        <property name="useMapperCommentGenerator" value="false"/>

        <!-- 抑制警告 -->
        <property name="suppressTypeWarnings" value="true"/>
        <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
        <property name="suppressAllComments" value="true"/>

        <!-- 是否生成注释代时间戳-->
        <property name="suppressDate" value="false"/>

        <!-- 自定义的注释生成插件-->
        <plugin type="com.alice.boot.plugin.generator.CommentPlugin">

            <property name="mappers" value="tk.mybatis.mapper.common.Mapper"/>
            <property name="author" value="Alice"/>
            <property name="needsSwagger" value="true"/>
            <property name="caseSensitive" value="true"/>
            <property name="forceAnnotation" value="true"/>
            <property name="beginningDelimiter" value="`"/>
            <property name="endingDelimiter" value="`"/>
            <!--配置是否启用lombok, 支持如下6种注解-->
            <!--当配置 Data 后，Getter Setter ToString EqualsAndHashCode 会被忽略-->
            <property name="lombok" value="Getter,Setter,Data,ToString,Accessors,EqualsAndHashCode"/>
        </plugin>

        <!-- 分页相关 -->
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin"/>
        <!-- 带上序列化接口 -->
        <plugin type="com.alice.boot.plugin.generator.SerializablePlugin"/>

        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://127.0.0.1:3306/gogo?serverTimezone=UTC"
                        userId="root"
                        password="X123456xxx">
        </jdbcConnection>
        <javaTypeResolver>
            <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，
            为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal -->
            <property name="forceBigDecimals" value="true"/>
            <!-- java8 localDateTime -->
            <property name="useJSR310Types" value="true"/>
        </javaTypeResolver>

        <!--MyBatis 生成器只需要生成 Model-->
        <javaModelGenerator targetPackage="com.alice.boot.entity" targetProject="src/main/java"/>

        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"/>

        <javaClientGenerator targetPackage="com.alice.boot.mapper" targetProject="src/main/java" type="XMLMAPPER"/>

        <table tableName="go_user" domainObjectName="User">
            <generatedKey column="id" sqlStatement="Mysql"/>
        </table>
        <table tableName="go_menu" domainObjectName="Menu">
            <generatedKey column="id" sqlStatement="Mysql"/>
        </table>
        <!--<table tableName="ns_game_detail" domainObjectName="NsGameDetail">-->
        <!--<generatedKey column="id" sqlStatement="JDBC"/>-->
        <!--</table>-->

        <!-- 选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
           选择的table会生成一下文件：
           1，SQL map文件
           2，生成一个主键类；
           3，除了BLOB和主键的其他字段的类；
           4，包含BLOB的类；
           5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
           6，Mapper接口（可选）

           tableName（必要）：要生成对象的表名；
           注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
               根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
               1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
               2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
               3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
               4，否则，使用指定的大小写格式查询；
           另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
           这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

           可选：
           1，schema：数据库的schema；
           2，catalog：数据库的catalog；
           3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
           4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
           5，enableInsert（默认true）：指定是否生成insert语句；
           6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
           7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
           8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
           9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
           10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
           11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
           12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
           13，modelType：参考context元素的defaultModelType，相当于覆盖；
           14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
           15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性
           注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
        -->

    </context>
</generatorConfiguration>